---
title: "Relatório Trabalho Prático de Teste Baseado em Especificação"
subtitle: "Método para adição de números inteiros muito, muito grandes"
author: "Danilo Balman Garcia"
toc: true
toc-title: Sumário
number-sections: false
highlight-style: pygments
format: 
  html:
    embed-resources: true

engine: knitr
---

```{css}
#| echo: false
ul,
p {
  text-align: justify !important
}
```


## Introdução

Este documento descreve o processo usado pelo autor do livro texto da disciplina, Mauricio Aniche, ao usar teste baseado em especificação para derivar casos de teste para o método ``substringsBetween()``, discutido em aula.

Use este relatório como um exemplo de como você deve confeccionar o seu relatório. Veja, não precisa ser idêntico ao que está aqui e, claro, não deve ser uma cópia deste documento.

## Passo 2: Explorando o Funcionamento do Programa em Teste

### Testes Realizados

1. **Caso de Sucesso Simples:**
  - Entrada: `left = [2, 3]`, `right = [4, 2]`.
  - Saída Esperada: `[6, 5]`.

2. **Adição com Listas Vazias:**
  - Entrada 1: `left = []`, `right = [1, 2, 3]`.
    - Saída Esperada: `[1, 2, 3]`.
  - Entrada 2: `left = [1, 2, 3]`, `right = []`.
    - Saída Esperada: `[1, 2, 3]`.
  - Entrada 3: `left = []`, `right = []`.
    - Saída Esperada: `[]`.

3. **Entrada Nula:**
  - Entrada 1: `left = null`, `right = [1, 2, 3]`.
    - Saída Esperada: `null`.
  - Entrada 2: `left = [1, 2, 3]`, `right = null`.
    - Saída Esperada: `null`.
  - Entrada 3: `left = null`, `right = null`.
    - Saída Esperada: `null`.

## Passo 3 - Identificar as partições

### Identificação das Partições para o Método de Soma

#### Parâmetro `left`:
O parâmetro `left` representa um número grande como uma lista de dígitos. As partições identificadas incluem casos que devem ser tratados separadamente:

- `left` é `null`: Verifica se o método retorna `null` quando a entrada é nula.
- `left` é uma lista vazia: Considera o número como `0`.
- `left` contém dígitos válidos (`0-9`): Um caso padrão para verificar a operação de soma.
- `left` contém valores fora do intervalo (`<0` ou `>9`): Deve lançar uma `IllegalArgumentException`.

#### Parâmetro `right`:
O comportamento do parâmetro `right` é simétrico ao do `left`. As partições incluem:

- `right` é `null`: Verifica se o método retorna `null` quando a entrada é nula.
- `right` é uma lista vazia: Considera o número como `0`.
- `right` contém dígitos válidos (`0-9`): Um caso padrão para verificar a operação de soma.
- `right` contém valores fora do intervalo (`<0` ou `>9`): Deve lançar uma `IllegalArgumentException`.

#### Casos Combinados:
Além das partições individuais, os seguintes casos combinados são relevantes para a validação:

1. Ambos `left` e `right` são válidos e contêm listas com dígitos no intervalo `[0-9]`.
2. Um dos parâmetros é `null`, enquanto o outro é válido.
3. Um dos parâmetros é uma lista vazia, enquanto o outro contém dígitos válidos.
4. Ambos os parâmetros são listas vazias.
5. Ambos os parâmetros contêm valores fora do intervalo `[0-9]`.
6. Um dos parâmetros ter apenas 1 elemento, enquanto outro tem muito mais elementos.

## Passo 4 - Identificar os valores limite

Bugs nos limites do domínio de entrada são comuns em sistemas de software. Quando criamos partições, elas têm valores limites próximos que "dividem" as partições equivalentes. Sempre que um valor limite é identificado, gosto de testar o que acontece com o programa quando as entradas vão de um limite para o outro. Ou seja, teste de dois pontos quando há um valor limite. Um teste é para o *on point* , que é o ponto que está dentro da partição; e o outro teste é para o "off point", que é o ponto mais próximo do valor limite que pertence à partição à qual o *on point* não pertence (ou seja, a outra partição).

Para a entrada os valores limites podem ser: 

- Uma lista vazia ou lista com um elemento
- Uma lista com muitos elementos (até quanto a memória aguentar)
- Duas entradas com tamanhos diferentes (uma entrada com 50 elementos e um com 1 elemento)

Para a saída os valores limites podem ser: 

- Resultado de uma soma de vários "9" em sequencia somados

## Passo 5 -  Derivar os casos de teste

Vamos criar alguns casos de testes de acordo com as partições identificadas.

### Teste de excessão 

- T01 : left é nulo 
- T02 : right é nulo
- T03 : ambos é nulo

### Teste com listas vazias

- T04 : left tem lista vazia
- T05 : right tem lista vazia
- T06 : ambos tem lista vazia 

### Teste com parâmetro não permitido

- T07 : left tem um número maior que 10
- T08 : left tem um número menor que 0 

### Caso padrão, para testar cálculo 

- T09 : Uma soma de duas listas com 1 elemento cada
- T10 : Uma soma de duas listas com 2 elemento cada
- T11 : Uma soma de duas listas com 3 elemento cada

### Caso específico

- T12 : Uma soma com duas listas com leve diferença de tamanho
- T13 : Uma soma com duas listas com maior diferença de tamanho
- T14 : uma soma com varios números 9 para teste de soma

## Passo 6 - Automatizar os casos de teste usando JUnit

Não tive dificuldades para implementar os casos de teste usando JUnit; minha maior dificuldade foi com o Java e suas sintaxes, com as quais não estou acostumado. Durante o teste 15, percebi que a função `add` não considera casos em que o resultado requer mais casas decimais do que os parâmetros fornecidos. Por exemplo, a soma de `[1] + [9]` resulta em `[0]`, pois o "1" da casa das dezenas não foi incluído no resultado. Acredito que isso se categorize como um erro.

## Passo 7 - Aumentar a suíte de testes por meio de experiência e criatividade

Tive uma ideia de fazer um loop de soma usando esse algoritmo, para testar a consistencia dele (T15)